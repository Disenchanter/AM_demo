AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Audio Device Management Backend - Single Table Architecture'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  CognitoUserPoolName:
    Type: String
    Default: AudioDeviceUsers
    Description: Cognito user pool name

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        AUDIO_MANAGEMENT_TABLE: !Ref AudioManagementTable
        ENVIRONMENT: !Ref Environment
        NODE_OPTIONS: "--enable-source-maps"

Resources:
  # Cognito user pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${CognitoUserPoolName}-${Environment}'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: role
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
      UserPoolTags:
        Environment: !Ref Environment
        Project: AudioDeviceManagement

  # Cognito user pool client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'AudioDeviceApp-${Environment}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30

  # Admin user group
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: admin
  Description: Administrator group
      Precedence: 1

  # Standard user group
  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: user
  Description: Standard user group
      Precedence: 2

  # DynamoDB - unified management table (single-table design)
  AudioManagementTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'AudioManagement-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AudioDeviceManagement

  # API Gateway
  AudioDeviceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Name: !Sub 'AudioDeviceAPI-${Environment}'
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization

  # Lambda function - Get Devices
  GetDevicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'GetDevices-${Environment}'
      CodeUri: ./
      Handler: lambda/devices/get-devices.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AudioManagementTable
      Events:
        GetDevices:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/devices
            Method: GET

  # Lambda function - Update Device
  UpdateDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'UpdateDevice-${Environment}'
      CodeUri: ./
      Handler: lambda/devices/update-device.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AudioManagementTable
      Events:
        UpdateDevice:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/devices/{device_id}
            Method: PUT

  # Lambda function - Get Presets
  GetPresetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'GetPresets-${Environment}'
      CodeUri: ./
      Handler: lambda/presets/get-presets.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AudioManagementTable
      Events:
        GetPresets:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/devices/{device_id}/presets
            Method: GET
        GetAllPresets:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/presets
            Method: GET

  # Lambda function - Create Preset
  CreatePresetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CreatePreset-${Environment}'
      CodeUri: ./
      Handler: lambda/presets/create-preset.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AudioManagementTable
      Events:
        CreatePreset:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/presets
            Method: POST

  # Lambda function - Apply Preset
  ApplyPresetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'ApplyPreset-${Environment}'
      CodeUri: ./
      Handler: lambda/presets/apply-preset.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AudioManagementTable
      Events:
        ApplyPreset:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/devices/{device_id}/apply-preset
            Method: POST

  # Lambda function - User Registration
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'Register-${Environment}'
      CodeUri: ./
      Handler: lambda/users/register.handler
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AudioManagementTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cognito-idp:AdminCreateUser'
                - 'cognito-idp:AdminAddUserToGroup'
                - 'cognito-idp:AdminSetUserPassword'
                - 'cognito-idp:AdminDeleteUser'
              Resource: !GetAtt UserPool.Arn
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/auth/register
            Method: POST
            Auth:
              Authorizer: NONE

  # Lambda function - User Login
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'Login-${Environment}'
      CodeUri: ./
      Handler: lambda/users/login.handler
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AudioManagementTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cognito-idp:InitiateAuth'
                - 'cognito-idp:AdminGetUser'
              Resource: !GetAtt UserPool.Arn
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/auth/login
            Method: POST
            Auth:
              Authorizer: NONE

  # Lambda function - Get User Profile
  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'GetProfile-${Environment}'
      CodeUri: ./
      Handler: lambda/users/get-profile.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AudioManagementTable
      Events:
        GetCurrentProfile:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/users/profile
            Method: GET
        GetAuthProfile:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/auth/profile
            Method: GET
        GetUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref AudioDeviceApi
            Path: /api/users/{user_id}
            Method: GET

  # CloudWatch log groups
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AudioDeviceApi}'
      RetentionInDays: 14

Outputs:
  # API-related outputs
  AudioDeviceApiUrl:
    Description: 'Audio Device Management API Gateway URL'
    Value: !Sub 'https://${AudioDeviceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  AudioDeviceApiId:
    Description: 'API Gateway ID'
    Value: !Ref AudioDeviceApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  # Cognito-related outputs
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  CognitoRegion:
    Description: 'Cognito Region'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-CognitoRegion'

  # DynamoDB-related outputs
  AudioManagementTableName:
    Description: 'DynamoDB Audio Management Table Name'
    Value: !Ref AudioManagementTable
    Export:
      Name: !Sub '${AWS::StackName}-AudioManagementTable'

  # Environment information
  Environment:
    Description: 'Deployment Environment'
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'